generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Users {
  id            String     @unique @default(uuid())
  nik           String     @unique
  email         String     @unique
  fullname      String
  password      String
  refresh_token String?
  role_id       Int?       @default(1)
  createdAt     DateTime   @default(now())
  avatar        String?
  employees     Employees?
  lecturers     Lecturers?
  students      Students?
  isVerified    Boolean?   @default(false)
  role          Roles?     @relation(fields: [role_id], references: [id])
}

model Students {
  id                    String             @unique @default(uuid())
  nim                   String             @unique
  nisn                  String             @unique
  identification_type   IdentificationType
  identification_number String
  birth_place           String
  birth_date            String
  gender                Gender
  religion              Religion
  citizenship           Citizenship
  marital_status        String
  country               String
  address               String
  rt                    String
  rw                    String
  postal_code           String
  subdistrict           String
  province              String
  city                  String
  phone_number          String
  kk_number             String
  school_type           String
  school_major          String
  school_name           String
  school_address        String
  school_postal_code    String
  school_subdistrict    String
  school_province       String
  school_city           String
  school_phone_number   String
  graduation_year       String
  father_name           String
  mother_name           String
  guardian_name         String
  parent_address        String
  parent_rt             String
  parent_rw             String
  parent_postal_code    String
  parent_subdistrict    String
  parent_province       String
  parent_phone_number   String
  father_education      String
  mother_education      String
  guardian_education    String?
  father_occupation     String
  mother_occupation     String
  guardian_occupation   String?
  father_income         String
  mother_income         String
  guardian_income       String?
  selection_type        String
  program               String
  academic_year         String
  registration_wave     String
  user_id               String             @unique
  createdAt             DateTime           @default(now())
  user                  Users              @relation(fields: [user_id], references: [id])
}

model Lecturers {
  id        String   @unique @default(uuid())
  nip       String   @unique
  createdAt DateTime @default(now())
  user_id   String   @unique
  user      Users    @relation(fields: [user_id], references: [id])
}

model Employees {
  id        String   @unique @default(uuid())
  nim       String   @unique
  createdAt DateTime @default(now())
  user_id   String   @unique
  user      Users    @relation(fields: [user_id], references: [id])
}

model Roles {
  id                Int                @id @default(autoincrement())
  name              String
  createdAt         DateTime           @default(now())
  roles_permissions RolesPermissions[]
  users             Users[]
  permissions       Permissions[]      @relation("PermissionsToRoles")
}

model Permissions {
  id                Int                @id @default(1)
  name              String
  createdAt         DateTime           @default(now())
  roles_permissions RolesPermissions[]
  roles             Roles[]            @relation("PermissionsToRoles")
}

model RolesPermissions {
  id            Int         @id @default(autoincrement())
  role_id       Int
  permission_id Int
  createdAt     DateTime    @default(now())
  permission    Permissions @relation(fields: [permission_id], references: [id])
  role          Roles       @relation(fields: [role_id], references: [id])
}

enum Gender {
  MALE   @map("Male")
  FEMALE @map("Female")
}

enum Religion {
  ISLAM    @map("Islam")
  KRISTEN  @map("Kristen")
  KATOLIK  @map("Katolik")
  KONGHUCU @map("Konghucu")
  HINDU    @map("Hindu")
  BUDHA    @map("Budha")
}

enum Citizenship {
  WNI
  WNA
}

enum IdentificationType {
  KTP
  SIM
  KARTU_PELAJAR @map("Kartu Pelajar")
}
