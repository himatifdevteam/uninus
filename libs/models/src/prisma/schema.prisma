datasource db {
  url      = env("DATABASE_URL")
  provider = "postgres"
}

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

model Users {
  id            String     @unique @default(uuid())
  nik           String     @unique
  email         String     @unique
  fullname      String?
  password      String
  refresh_token String?
  role_id       Int?       @default(1)
  role          Roles?     @relation(fields: [role_id], references: [id])
  students      Students?
  lecturers     Lecturers?
  employees     Employees?
  createdAt     DateTime   @default(now())
  avatar        String?    @default(dbgenerated("null"))
}

model Students {
  id                    String             @unique @default(uuid())
  nim                   String             @unique
  nisn                  String
  identification_type   IdentificationType
  identification_number String
  kk_number             String
  school_type           String
  school_major          String
  school_name           String
  school_address        String
  school_postal_code    String
  school_subdistrict    String
  school_province       String
  school_city           String
  school_phone_number   String
  graduation_year       String
  father_name           String
  mother_name           String
  guardian_name         String
  parent_address        String
  parent_rt             String
  parent_rw             String
  parent_postal_code    String
  parent_subdistrict    String
  parent_province       String
  parent_phone_number   String
  father_education      String
  mother_education      String
  guardian_education    String?
  father_occupation     String
  mother_occupation     String
  guardian_occupation   String?
  father_income         String
  mother_income         String
  guardian_income       String?
  selection_type        String
  program               String
  academic_year         String
  registration_wave     String
  user_id               String             @unique
  user                  Users              @relation(fields: [user_id], references: [id])
  profile               Profiles?          @relation(fields: [profile_id], references: [id])
  profile_id            String?            @unique
  createdAt             DateTime           @default(now())
}

model Profiles {
  id             String      @unique @default(uuid())
  place_of_birth String
  date_of_birth  DateTime
  gender         Gender
  religion       Religion
  citizenship    Citizenship
  marital_status String
  country        String
  address        String
  rt             String
  rw             String
  postal_code    String
  subdistrict    String
  province       String
  city           String
  phone_number   String
  students       Students?
  lecturers      Lecturers?
  employees      Employees?
}

model Lecturers {
  id         String    @unique @default(uuid())
  nip        String    @unique
  user_id    String    @unique
  user       Users     @relation(fields: [user_id], references: [id])
  createdAt  DateTime  @default(now())
  profile    Profiles? @relation(fields: [profile_id], references: [id])
  profile_id String?   @unique
}

model Employees {
  id         String    @unique @default(uuid())
  nim        String    @unique
  user_id    String    @unique
  user       Users     @relation(fields: [user_id], references: [id])
  createdAt  DateTime  @default(now())
  profile    Profiles? @relation(fields: [profile_id], references: [id])
  profile_id String?   @unique
}

model Roles {
  id                Int                @id @default(autoincrement())
  name              String
  users             Users[]
  permissions       Permissions[]
  roles_permissions RolesPermissions[]
  createdAt         DateTime           @default(now())
}

model Permissions {
  id                Int                @id @default(1)
  name              String
  roles             Roles[]
  roles_permissions RolesPermissions[]
  createdAt         DateTime           @default(now())
}

model RolesPermissions {
  id            Int         @id @default(autoincrement())
  role_id       Int
  permission_id Int
  role          Roles       @relation(fields: [role_id], references: [id])
  permission    Permissions @relation(fields: [permission_id], references: [id])
  createdAt     DateTime    @default(now())
}

enum Gender {
  MALE
  FEMALE
}

enum Religion {
  ISLAM
  KRISTEN
  KATHOLIK
  KONGHUCU
  HINDU
  BUDHA
}

enum Citizenship {
  WNI
  WNA
}

enum IdentificationType {
  KTP
  SIM
  KARTU_PELAJAR
}
