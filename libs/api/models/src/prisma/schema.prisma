generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Users {
  id            String     @unique @default(uuid())
  email         String     @unique
  fullname      String
  password      String
  refresh_token String?
  role_id       Int?       @default(1)
  createdAt     DateTime   @default(now())
  avatar        String?
  employees     Employees?
  lecturers     Lecturers?
  students      Students?
  otp           OTP?
  isVerified    Boolean?   @default(false)
  role          Roles?     @relation(fields: [role_id], references: [id])
}

model Students {
  id                           String   @unique @default(uuid())
  nik                          String?  @unique
  nisn                         String?  @unique
  birth_place                  String?
  birth_date                   String?
  gender                       String?
  phone_number                 String?
  religion                     String?
  citizenship                  String?
  marital_status               String?
  country                      String?
  address                      String?
  postal_code                  String?
  subdistrict                  String?
  province                     String?
  city                         String?
  school_type                  String?
  graduation_year              String?
  school_major                 String?
  school_name                  String?
  school_npsn                  String?
  school_address               String?
  school_postal_code           String?
  school_subdistrict           String?
  school_province              String?
  school_city                  String?
  school_phone_number          String?
  father_name                  String?
  mother_name                  String?
  guardian_name                String?
  father_status                String?
  mother_status                String?
  guardian_status              String?
  parent_address               String?
  parent_postal_code           String?
  parent_subdistrict           String?
  parent_province              String?
  parent_city                  String?
  father_education             String?
  mother_education             String?
  guardian_education           String?
  father_occupation            String?
  father_occupation_position   String?
  mother_occupation            String?
  mother_occupation_position   String?
  guardian_occupation          String?
  guardian_occupation_position String?
  father_income                String?
  mother_income                String?
  guardian_income              String?
  guardian_address             String?
  guardian_postal_code         String?
  guardian_subdistrict         String?
  guardian_province            String?
  guardian_city                String?
  faculty_type                 String?
  education_programs           String?
  study_program                String?
  selection_type               String?
  family_card                  String?
  pass_photo                   String?
  ktp_card                     String?
  school_report_card           String?
  birth_certificate            String?
  additional_documents         String?
  ijazah_card                  String?
  kipk_card                    String?
  academic_year                String?
  registration_wave            String?
  registration_status          String?
  registration_number          String?
  user_id                      String   @unique
  createdAt                    DateTime @default(now())
  user                         Users    @relation(fields: [user_id], references: [id])
}

model Lecturers {
  id        String   @unique @default(uuid())
  nip       String   @unique
  createdAt DateTime @default(now())
  user_id   String   @unique
  user      Users    @relation(fields: [user_id], references: [id])
}

model Employees {
  id        String   @unique @default(uuid())
  nim       String   @unique
  createdAt DateTime @default(now())
  user_id   String   @unique
  user      Users    @relation(fields: [user_id], references: [id])
}

model Province {
  id     Int    @id @default(autoincrement())
  name   String
  cities City[]
}

model City {
  id           Int           @id @default(autoincrement())
  name         String
  province_id  Int
  province     Province      @relation(fields: [province_id], references: [id], onDelete: Cascade)
  sub_district SubDistrict[]
}

model SubDistrict {
  id      Int    @id @default(autoincrement())
  name    String
  city_id Int
  city    City   @relation(fields: [city_id], references: [id], onDelete: Cascade)
}

model Roles {
  id                Int                @id @default(autoincrement())
  name              String
  createdAt         DateTime           @default(now())
  roles_permissions RolesPermissions[]
  users             Users[]
  permissions       Permissions[]      @relation("PermissionsToRoles")
}

model Permissions {
  id                Int                @id @default(1)
  name              String
  createdAt         DateTime           @default(now())
  roles_permissions RolesPermissions[]
  roles             Roles[]            @relation("PermissionsToRoles")
}

model RolesPermissions {
  id            Int         @id @default(autoincrement())
  role_id       Int
  permission_id Int
  createdAt     DateTime    @default(now())
  permission    Permissions @relation(fields: [permission_id], references: [id])
  role          Roles       @relation(fields: [role_id], references: [id])
}

model OTP {
  id        Int    @id @default(autoincrement())
  token     String
  user_id   String @unique
  user      Users  @relation(fields: [user_id], references: [id])
  expiredAt Int
}

model DegreeProgram {
  id         Int          @id @default(autoincrement())
  name       String
  faculty    Faculty[]
  department Department[]
}

model Faculty {
  id               Int            @id @default(autoincrement())
  name             String
  department       Department[]
  degreeProgram_id Int?
  degreeProgram    DegreeProgram? @relation(fields: [degreeProgram_id], references: [id])
}

model Department {
  id                Int            @id @default(autoincrement())
  name              String
  faculty_id        Int?
  degree_program_id Int?
  Faculty           Faculty?       @relation(fields: [faculty_id], references: [id])
  degreeProgram     DegreeProgram? @relation(fields: [degree_program_id], references: [id])
}

model MaritalStatus {
  id   Int    @id @default(autoincrement())
  name String
}

model Religion {
  id   Int    @id @default(autoincrement())
  name String
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String
}

model Citizenship {
  id      Int       @id @default(autoincrement())
  name    String
  Country Country[]
}

model Salary {
  id   Int    @id @default(autoincrement())
  name String
}

model SelectionPath {
  id   Int    @id @default(autoincrement())
  name String
}

model EducationHistory {
  id             Int    @id @default(autoincrement())
  npsn           String @unique
  name           String
  province       String
  district_city  String
  sub_district   String
  street_address String
}

model Country {
  id             Int          @id @default(autoincrement())
  name           String
  citizenship_id Int?
  citizenship    Citizenship? @relation(fields: [citizenship_id], references: [id])
}

model Occupation {
  id                 Int                  @id @default(autoincrement())
  name               String
  occupationposition OccupationPosition[]
}

model OccupationPosition {
  id            Int         @id @default(autoincrement())
  name          String
  occupation_id Int?
  Occupation    Occupation? @relation(fields: [occupation_id], references: [id])
}

model Disabilities {
  id   Int    @id @default(autoincrement())
  name String
}

model Scholarship {
  id   Int    @id @default(autoincrement())
  name String
}
