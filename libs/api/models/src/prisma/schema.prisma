generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Users {
  id            String     @unique @default(uuid())
  email         String     @unique
  fullname      String
  password      String
  refresh_token String?
  role_id       Int?       @default(1)
  createdAt     DateTime   @default(now())
  avatar        String?
  employees     Employees?
  lecturers     Lecturers?
  students      Students?
  otp           OTP?
  isVerified    Boolean?   @default(false)
  role          Roles?     @relation(fields: [role_id], references: [id])
}

model Students {
  id                           String               @unique @default(uuid())
  nik                          String?              @unique
  nisn                         String?              @unique
  birth_place                  String?
  birth_date                   String?
  gender                       Gender?              @relation(fields: [gender_id], references: [id])
  gender_id                    Int?
  phone_number                 String?
  religion                     Religion?            @relation(fields: [religion_id], references: [id])
  religion_id                  Int?
  citizenship                  Citizenship?         @relation(fields: [citizenship_id], references: [id])
  citizenship_id               Int?
  country                      Country?             @relation(fields: [country_id], references: [id])
  country_id                   Int?
  address                      String?
  postal_code                  String?
  province                     Province?            @relation(fields: [province_id], references: [id])
  province_id                  Int?
  city                         City?                @relation(fields: [city_id], references: [id])
  city_id                      Int?
  marital_status               MaritalStatus?       @relation(fields: [marital_status_id], references: [id])
  marital_status_id            Int?
  subdistrict                  SubDistrict?         @relation(fields: [subdistrict_id], references: [id])
  subdistrict_id               Int?
  graduation_year              String?
  school_type                  String?
  education_history            EducationHistory?    @relation(fields: [education_history_id], references: [id])
  education_history_id         Int?
  school_major                 String?
  father_name                  String?
  mother_name                  String?
  guardian_name                String?
  father_status                FatherStatus?        @relation(fields: [father_status_id], references: [id])
  father_status_id             Int?
  mother_status                MotherStatus?        @relation(fields: [mother_status_id], references: [id])
  mother_status_id             Int?
  guardian_status              String?
  parent_address               String?
  parent_postal_code           String?
  parent_subdistrict           String?
  parent_province              String?
  parent_city                  String?
  father_education             String?
  mother_education             String?
  guardian_education           String?
  father_occupation            String?
  father_occupation_position   String?
  mother_occupation            String?
  mother_occupation_position   String?
  guardian_occupation          String?
  guardian_occupation_position String?
  father_income                String?
  mother_income                String?
  guardian_income              String?
  guardian_address             String?
  guardian_postal_code         String?
  guardian_subdistrict         String?
  guardian_province            String?
  guardian_city                String?
  faculty_type                 String?
  education_programs           String?
  first_study_program          String?
  second_study_program         String?
  selection_type               String?
  family_card_number           String?
  family_card                  String?
  ktp_card                     String?
  school_report_card           SchoolReportCard?    @relation(fields: [school_report_card_id], references: [id])
  school_report_card_id        Int?
  birth_certificate            String?
  utbk_certificate             String?
  utbk_grade                   Int?
  additional_documents         AdditionalDocuments? @relation(fields: [additional_documents_id], references: [id])
  additional_documents_id      Int?
  disabilities_category        Disabilities?        @relation(fields: [disabilities_id], references: [id])
  disabilities_id              Int?
  ijazah_card                  String?
  academic_year                String?
  math_grade                   MathGrade?           @relation(fields: [math_grade_id], references: [id])
  math_grade_id                Int?
  indonesian_language_grade    IndonesianLangGrade? @relation(fields: [indonesian_language_grade_id], references: [id])
  indonesian_language_grade_id Int?
  english_language_grade       EnglishLangGrade?    @relation(fields: [english_language_grade_id], references: [id])
  english_language_grade_id    Int?
  scholarship                  Scholarship?         @relation(fields: [scholarship_id], references: [id])
  scholarship_id               Int?
  registration_wave            String?
  registration_status          String?
  registration_number          String?
  user_id                      String               @unique
  createdAt                    DateTime             @default(now())
  user                         Users                @relation(fields: [user_id], references: [id])
}

model Lecturers {
  id        String   @unique @default(uuid())
  nip       String   @unique
  createdAt DateTime @default(now())
  user_id   String   @unique
  user      Users    @relation(fields: [user_id], references: [id])
}

model Employees {
  id        String   @unique @default(uuid())
  nim       String   @unique
  createdAt DateTime @default(now())
  user_id   String   @unique
  user      Users    @relation(fields: [user_id], references: [id])
}

model Province {
  id       Int        @id @default(autoincrement())
  name     String
  cities   City[]
  students Students[]
}

model City {
  id           Int           @id @default(autoincrement())
  name         String
  province_id  Int
  province     Province      @relation(fields: [province_id], references: [id], onDelete: Cascade)
  sub_district SubDistrict[]
  students     Students[]
}

model SubDistrict {
  id       Int        @id @default(autoincrement())
  name     String
  city_id  Int
  city     City       @relation(fields: [city_id], references: [id], onDelete: Cascade)
  students Students[]
}

model Roles {
  id                Int                @id @default(autoincrement())
  name              String
  createdAt         DateTime           @default(now())
  roles_permissions RolesPermissions[]
  users             Users[]
  permissions       Permissions[]      @relation("PermissionsToRoles")
}

model Permissions {
  id                Int                @id @default(1)
  name              String
  createdAt         DateTime           @default(now())
  roles_permissions RolesPermissions[]
  roles             Roles[]            @relation("PermissionsToRoles")
}

model RolesPermissions {
  id            Int         @id @default(autoincrement())
  role_id       Int
  permission_id Int
  createdAt     DateTime    @default(now())
  permission    Permissions @relation(fields: [permission_id], references: [id])
  role          Roles       @relation(fields: [role_id], references: [id])
}

model OTP {
  id        Int    @id @default(autoincrement())
  token     String
  user_id   String @unique
  user      Users  @relation(fields: [user_id], references: [id])
  expiredAt Int
}

model DegreeProgram {
  id         Int          @id @default(autoincrement())
  name       String
  faculty    Faculty[]
  department Department[]
}

model Faculty {
  id               Int            @id @default(autoincrement())
  name             String
  department       Department[]
  degreeProgram_id Int?
  degreeProgram    DegreeProgram? @relation(fields: [degreeProgram_id], references: [id])
}

model Department {
  id                Int            @id @default(autoincrement())
  name              String
  faculty_id        Int?
  degree_program_id Int?
  Faculty           Faculty?       @relation(fields: [faculty_id], references: [id])
  degreeProgram     DegreeProgram? @relation(fields: [degree_program_id], references: [id])
}

model MaritalStatus {
  id       Int        @id @default(autoincrement())
  name     String
  students Students[]
}

model Religion {
  id       Int        @id @default(autoincrement())
  name     String
  students Students[]
}

model Gender {
  id       Int        @id @default(autoincrement())
  name     String
  students Students[]
}

model Citizenship {
  id       Int        @id @default(autoincrement())
  name     String
  Country  Country[]
  students Students[]
}

model Salary {
  id   Int    @id @default(autoincrement())
  name String
}

model SelectionPath {
  id   Int    @id @default(autoincrement())
  name String
}

model EducationHistory {
  id             Int        @id @default(autoincrement())
  npsn           String     @unique
  name           String
  province       String
  district_city  String
  sub_district   String
  street_address String
  students       Students[]
}

model SchoolType {
  id   Int    @id @default(autoincrement())
  name String
}

model Country {
  id             Int          @id @default(autoincrement())
  name           String
  citizenship_id Int?
  citizenship    Citizenship? @relation(fields: [citizenship_id], references: [id])
  students       Students[]
}

model Occupation {
  id                 Int                  @id @default(autoincrement())
  name               String
  occupationposition OccupationPosition[]
}

model OccupationPosition {
  id            Int         @id @default(autoincrement())
  name          String
  occupation_id Int?
  Occupation    Occupation? @relation(fields: [occupation_id], references: [id])
}

model Disabilities {
  id       Int        @id @default(autoincrement())
  name     String
  students Students[]
}

model Scholarship {
  id       Int        @id @default(autoincrement())
  name     String
  students Students[]
}

model MathGrade {
  id              Int        @id @default(autoincrement())
  first_semester  Int?
  second_semester Int?
  third_semester  Int?
  fourth_semester Int?
  students        Students[]
}

model IndonesianLangGrade {
  id              Int        @id @default(autoincrement())
  first_semester  Int?
  second_semester Int?
  third_semester  Int?
  fourth_semester Int?
  students        Students[]
}

model EnglishLangGrade {
  id              Int        @id @default(autoincrement())
  first_semester  Int?
  second_semester Int?
  third_semester  Int?
  fourth_semester Int?
  students        Students[]
}

model SchoolReportCard {
  id              Int        @id @default(autoincrement())
  first_semester  String?
  second_semester String?
  third_semester  String?
  fourth_semester String?
  students        Students[]
}

model AdditionalDocuments {
  id                       Int        @id @default(autoincrement())
  nu_membership            String?
  assignment_certificate   String?
  medical_certificate      String?
  quran_certificate        String?
  non_academic_certificate String?
  students                 Students[]
}

model FatherStatus {
  id       Int        @id @default(autoincrement())
  name     String?
  students Students[]
}

model MotherStatus {
  id       Int        @id @default(autoincrement())
  name     String?
  students Students[]
}
