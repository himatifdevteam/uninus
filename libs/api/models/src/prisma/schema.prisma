generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Users {
  id            String     @unique @default(uuid())
  email         String     @unique
  fullname      String
  password      String
  refresh_token String?
  role_id       Int?       @default(1)
  createdAt     DateTime   @default(now())
  avatar        String?
  employees     Employees?
  lecturers     Lecturers?
  students      Students?
  otp           OTP?
  isVerified    Boolean?   @default(false)
  role          Roles?     @relation(fields: [role_id], references: [id])
}

model Students {
  id                      String              @unique @default(uuid())
  nik                     String?
  nisn                    String?
  no_kk                   String?
  gender                  Gender?             @relation(fields: [gender_id], references: [id], onUpdate: Cascade)
  gender_id               Int?
  religion                Religion?           @relation(fields: [religion_id], references: [id], onUpdate: Cascade)
  religion_id             Int?
  birth_place             String?
  birth_date              String?
  phone_number            String?             @unique
  citizenship             Citizenship?        @relation(fields: [citizenship_id], references: [id], onUpdate: Cascade)
  citizenship_id          Int?
  marital_status          MaritalStatus?      @relation(fields: [marital_status_id], references: [id], onUpdate: Cascade)
  marital_status_id       Int?
  country                 Country?            @relation(fields: [country_id], references: [id], onUpdate: Cascade)
  country_id              Int?
  address                 String?
  subdistrict             SubDistrict?        @relation("student", fields: [subdistrict_id], references: [id], onUpdate: Cascade)
  subdistrict_id          Int?
  province                Province?           @relation("student", fields: [province_id], references: [id], onUpdate: Cascade)
  province_id             Int?
  city                    City?               @relation("student", fields: [city_id], references: [id], onUpdate: Cascade)
  city_id                 Int?
  education_type          EducationTypes?     @relation(fields: [education_type_id], references: [id], onUpdate: Cascade)
  education_type_id       Int?
  education_major         EducationMajor?     @relation(fields: [education_major_id], references: [id], onUpdate: Cascade)
  education_major_id      Int?
  graduation_year         String?
  education_npsn          String?
  education               Education?          @relation(fields: [education_npsn], references: [npsn], onUpdate: Cascade)
  salary                  Salary?             @relation("student", fields: [salary_id], references: [id], onUpdate: Cascade)
  salary_id               Int?
  occupation              Occupation?         @relation("student", fields: [occupation_id], references: [id], onUpdate: Cascade)
  occupation_id           Int?
  occupation_position     OccupationPosition? @relation("student", fields: [occupation_position_id], references: [id], onUpdate: Cascade)
  occupation_position_id  Int?
  company_name            String?
  company_address         String?
  father_name             String?
  father_status           ParentStatus?       @relation("father", fields: [father_status_id], references: [id], onUpdate: Cascade)
  father_status_id        Int?
  father_education        ParentEducation?    @relation("father", fields: [father_education_id], references: [id], onUpdate: Cascade)
  father_education_id     Int?
  father_occupation       Occupation?         @relation("father", fields: [father_occupation_id], references: [id], onUpdate: Cascade)
  father_occupation_id    Int?
  father_position         OccupationPosition? @relation("father", fields: [father_position_id], references: [id], onUpdate: Cascade)
  father_position_id      Int?
  father_salary           Salary?             @relation("father", fields: [father_salary_id], references: [id], onUpdate: Cascade)
  father_salary_id        Int?
  mother_name             String?
  mother_status           ParentStatus?       @relation("mother", fields: [mother_status_id], references: [id], onUpdate: Cascade)
  mother_status_id        Int?
  mother_education        ParentEducation?    @relation("mother", fields: [mother_education_id], references: [id], onUpdate: Cascade)
  mother_education_id     Int?
  mother_occupation       Occupation?         @relation("mother", fields: [mother_occupation_id], references: [id], onUpdate: Cascade)
  mother_occupation_id    Int?
  mother_position         OccupationPosition? @relation("mother", fields: [mother_position_id], references: [id], onUpdate: Cascade)
  mother_position_id      Int?
  mother_salary           Salary?             @relation("mother", fields: [mother_salary_id], references: [id], onUpdate: Cascade)
  mother_salary_id        Int?
  guardian_name           String?
  guardian_status         ParentStatus?       @relation("guardian", fields: [guardian_status_id], references: [id], onUpdate: Cascade)
  guardian_status_id      Int?
  guardian_education      ParentEducation?    @relation("guardian", fields: [guardian_education_id], references: [id], onUpdate: Cascade)
  guardian_education_id   Int?
  guardian_occupation     Occupation?         @relation("guardian", fields: [guardian_occupation_id], references: [id], onUpdate: Cascade)
  guardian_occupation_id  Int?
  guardian_position       OccupationPosition? @relation("guardian", fields: [guardian_position_id], references: [id], onUpdate: Cascade)
  guardian_position_id    Int?
  guardian_salary         Salary?             @relation("guardian", fields: [guardian_salary_id], references: [id], onUpdate: Cascade)
  guardian_salary_id      Int?
  guardian_province       Province?           @relation("guardian", fields: [guardian_province_id], references: [id], onUpdate: Cascade)
  guardian_province_id    Int?
  guardian_subdistrict    SubDistrict?        @relation("guardian", fields: [guardian_subdistrict_id], references: [id], onUpdate: Cascade)
  guardian_subdistrict_id Int?
  guardian_city           City?               @relation("guardian", fields: [guardian_city_id], references: [id], onUpdate: Cascade)
  guardian_city_id        Int?
  guardian_address        String?
  parent_province         Province?           @relation("parent", fields: [parent_province_id], references: [id], onUpdate: Cascade)
  parent_province_id      Int?
  parent_subdistrict      SubDistrict?        @relation("parent", fields: [parent_subdistrict_id], references: [id], onUpdate: Cascade)
  parent_subdistrict_id   Int?
  parent_city             City?               @relation("parent", fields: [parent_city_id], references: [id], onUpdate: Cascade)
  parent_city_id          Int?
  parent_address          String?
  scholarship             Scholarship?        @relation(fields: [scholarship_id], references: [id], onUpdate: Cascade)
  scholarship_id          Int?
  disabilities            Disabilities?       @relation(fields: [disabilities_id], references: [id], onUpdate: Cascade)
  disabilities_id         Int?
  faculty                 Faculty?            @relation(fields: [faculty_id], references: [id], onUpdate: Cascade)
  faculty_id              Int?
  department              Department?         @relation("student", fields: [department_id], references: [id], onUpdate: Cascade)
  department_id           Int?
  academic_year           String?
  user                    Users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id                 String              @unique
  createdAt               DateTime            @default(now())
  pmb                     PMB?
}

model StudentGrade {
  id       String  @unique @default(uuid())
  subject  String?
  semester String?
  grade    Float?  @default(0)
  pmb      PMB?    @relation(fields: [pmb_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pmb_id   String?
}

model PMB {
  id                     String              @unique @default(uuid())
  degree_program         DegreeProgram?      @relation(fields: [degree_program_id], references: [id])
  degree_program_id      Int?
  first_deparment        Department?         @relation("first_deparment", fields: [first_deparment_id], references: [id])
  first_deparment_id     Int?
  second_deparment       Department?         @relation("second_deparment", fields: [second_deparment_id], references: [id])
  second_deparment_id    Int?
  registration_status    RegistrationStatus? @relation(fields: [registration_status_id], references: [id])
  registration_status_id Int?
  registration_number    String?
  selection_path         SelectionPath?      @relation(fields: [selection_path_id], references: [id])
  selection_path_id      Int?
  student_id             String?             @unique
  student                Students?           @relation(fields: [student_id], references: [id], onDelete: Cascade)
  utbk_pu                Float?              @default(0)
  utbk_kk                Float?              @default(0)
  utbk_ppu               Float?              @default(0)
  utbk_kmbm              Float?              @default(0)
  average_utbk           Float?              @default(0)
  utbk                   Float?              @default(0)
  average_grade          Float?              @default(0)
  student_grade          StudentGrade[]
  documents              Documents[]
  createdAt              DateTime            @default(now())
}

model RegistrationStatus {
  id   Int     @id @default(autoincrement())
  name String?
  pmb  PMB[]
}

model Documents {
  id     String  @unique @default(uuid())
  name   String
  path   String
  pmb    PMB?    @relation(fields: [pmb_id], references: [id], onDelete: Cascade)
  pmb_id String?
}

model EducationTypes {
  id                Int              @id @default(autoincrement())
  name              String
  students          Students[]
  education_major   EducationMajor[]
  education         Education[]
  degree_program    DegreeProgram?   @relation(fields: [degree_program_id], references: [id], onUpdate: Cascade)
  degree_program_id Int?
}

model EducationMajor {
  id                Int            @id @default(autoincrement())
  name              String
  education_type    EducationTypes @relation(fields: [education_type_id], references: [id], onUpdate: Cascade)
  education_type_id Int
  student           Students[]
}

model ParentEducation {
  id       Int        @id @default(autoincrement())
  name     String
  mother   Students[] @relation("mother")
  father   Students[] @relation("father")
  guardian Students[] @relation("guardian")
}

model ParentStatus {
  id       Int        @id @default(autoincrement())
  name     String
  father   Students[] @relation("father")
  mother   Students[] @relation("mother")
  guardian Students[] @relation("guardian")
}

model Province {
  id       Int        @id @default(autoincrement())
  name     String
  cities   City[]
  students Students[] @relation("student")
  parent   Students[] @relation("parent")
  guardian Students[] @relation("guardian")
}

model City {
  id           Int           @id @default(autoincrement())
  name         String
  province_id  Int
  province     Province      @relation(fields: [province_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sub_district SubDistrict[]
  students     Students[]    @relation("student")
  parent       Students[]    @relation("parent")
  guardian     Students[]    @relation("guardian")
}

model SubDistrict {
  id       Int        @id @default(autoincrement())
  name     String
  city_id  Int
  city     City       @relation(fields: [city_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  students Students[] @relation("student")
  parent   Students[] @relation("parent")
  guardian Students[] @relation("guardian")
}

model Roles {
  id                Int                @id @default(autoincrement())
  name              String
  createdAt         DateTime           @default(now())
  roles_permissions RolesPermissions[]
  users             Users[]
  permissions       Permissions[]      @relation("PermissionsToRoles")
}

model Permissions {
  id                Int                @id @default(1)
  name              String
  createdAt         DateTime           @default(now())
  roles_permissions RolesPermissions[]
  roles             Roles[]            @relation("PermissionsToRoles")
}

model RolesPermissions {
  id            Int         @id @default(autoincrement())
  role_id       Int
  permission_id Int
  createdAt     DateTime    @default(now())
  permission    Permissions @relation(fields: [permission_id], references: [id])
  role          Roles       @relation(fields: [role_id], references: [id])
}

model OTP {
  id        Int    @id @default(autoincrement())
  token     String
  expiredAt BigInt
  user_id   String @unique
  user      Users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model DegreeProgram {
  id             Int              @id @default(autoincrement())
  name           String
  faculty        Faculty[]
  department     Department[]
  pmb            PMB[]
  education_type EducationTypes[]
  selection_path SelectionPath[]
}

model SelectionPath {
  id                Int            @id @default(autoincrement())
  name              String
  PMB               PMB[]
  degree_program    DegreeProgram? @relation(fields: [degree_program_id], references: [id])
  degree_program_id Int?
}

model Faculty {
  id                Int            @id @default(autoincrement())
  name              String
  degree_program_id Int?
  department        Department[]
  degreeProgram     DegreeProgram? @relation(fields: [degree_program_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student           Students[]
  Lecturers         Lecturers[]
}

model Department {
  id                Int            @id @default(autoincrement())
  name              String
  faculty_id        Int?
  degree_program_id Int?
  Faculty           Faculty?       @relation(fields: [faculty_id], references: [id], onUpdate: Cascade)
  degreeProgram     DegreeProgram? @relation(fields: [degree_program_id], references: [id], onUpdate: Cascade)
  student           Students[]     @relation("student")
  first_deparment   PMB[]          @relation("first_deparment")
  second_deparment  PMB[]          @relation("second_deparment")
  Lecturers         Lecturers[]
}

model MaritalStatus {
  id       Int        @id @default(autoincrement())
  name     String
  students Students[]
}

model Religion {
  id       Int        @id @default(autoincrement())
  name     String
  students Students[]
}

model Gender {
  id       Int        @id @default(autoincrement())
  name     String
  students Students[]
}

model Citizenship {
  id       Int        @id @default(autoincrement())
  name     String
  Country  Country[]
  students Students[]
}

model Salary {
  id       Int        @id @default(autoincrement())
  name     String
  father   Students[] @relation("father")
  mother   Students[] @relation("mother")
  guardian Students[] @relation("guardian")
  Students Students[] @relation("student")
}

model Education {
  id                     Int                    @id @default(autoincrement())
  npsn                   String                 @unique
  name                   String
  province               String
  district_city          String
  sub_district           String
  street_address         String
  education_type         EducationTypes         @relation(fields: [education_type_id], references: [id], onUpdate: Cascade)
  education_type_id      Int
  students               Students[]
  employee_has_education EmployeeHasEducation[]
}

model Country {
  id             Int          @id @default(autoincrement())
  name           String
  citizenship_id Int?
  citizenship    Citizenship? @relation(fields: [citizenship_id], references: [id], onUpdate: Cascade)
  students       Students[]
}

model Occupation {
  id                 Int                  @id @default(autoincrement())
  name               String
  occupationposition OccupationPosition[]
  father             Students[]           @relation("father")
  mother             Students[]           @relation("mother")
  guardian           Students[]           @relation("guardian")
  Students           Students[]           @relation("student")
}

model OccupationPosition {
  id            Int         @id @default(autoincrement())
  name          String
  occupation_id Int?
  occupation    Occupation? @relation(fields: [occupation_id], references: [id], onUpdate: Cascade)
  father        Students[]  @relation("father")
  mother        Students[]  @relation("mother")
  guardian      Students[]  @relation("guardian")
  Students      Students[]  @relation("student")
}

model Disabilities {
  id      Int        @id @default(autoincrement())
  name    String
  student Students[]
}

model Scholarship {
  id      Int        @id @default(autoincrement())
  name    String
  student Students[]
}

model Questions {
  id                Int      @id @default(autoincrement())
  question          String
  correct_answer    String
  incorrect_answers String[]
}

model Employees {
  id                       Int                       @unique @default(autoincrement())
  nip                      String?
  nidn                     String?
  birth_date               String?
  user_id                  String                    @unique
  user                     Users                     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  employee_status_id       Int?
  employee_status          EmployeeStatus?           @relation(fields: [employee_status_id], references: [id])
  addition_task            String?
  createdAt                DateTime                  @default(now())
  appointment_decree       AppointmentDecree[]
  employee_has_category    EmployeeHasCategory[]
  employee_has_education   EmployeeHasEducation[]
  employee_has_workunit    EmployeeHasWorkUnit[]
  certification_profession CertificationProfession[]
  academic_staff           AcademicStaff?
  lecturers                Lecturers?
}

model EmployeeHasEducation {
  id           Int       @id @default(autoincrement())
  education_id Int
  education    Education @relation(fields: [education_id], references: [id])
  employee_id  Int
  employee     Employees @relation(fields: [employee_id], references: [id])
}

model EmployeeHasCategory {
  id                   Int                @id @default(autoincrement())
  employee_id          Int
  employee             Employees          @relation(fields: [employee_id], references: [id])
  employee_category_id Int
  employee_category    EmployeeCategories @relation(fields: [employee_category_id], references: [id])
}

model EmployeeHasWorkUnit {
  id           Int       @id @default(autoincrement())
  employee_id  Int
  employee     Employees @relation(fields: [employee_id], references: [id])
  work_unit_id Int
  work_unit    WorkUnit  @relation(fields: [work_unit_id], references: [id])
}

model Lecturers {
  id                     String            @unique @default(uuid())
  lecturer_certification Boolean?
  lecturer_position_id   Int?
  lecturer_position      LecturerPosition? @relation(fields: [lecturer_position_id], references: [id])
  faculty_id             Int?
  faculty                Faculty?          @relation(fields: [faculty_id], references: [id])
  department_id          Int?
  department             Department?       @relation(fields: [department_id], references: [id])
  user_id                String            @unique
  user                   Users             @relation(fields: [user_id], references: [id])
  employee_id            Int?              @unique
  employee               Employees?        @relation(fields: [employee_id], references: [id])
  createdAt              DateTime          @default(now())
}

model AcademicStaff {
  id                   String            @unique @default(uuid())
  employee_id          Int?              @unique
  employee             Employees?        @relation(fields: [employee_id], references: [id])
  academic_position_id Int?
  academin_position    AcademicPosition? @relation(fields: [academic_position_id], references: [id])
  createdAt            DateTime          @default(now())
}

model CertificationProfession {
  id          Int       @id @default(autoincrement())
  name        String
  path        String
  employee_id Int
  employee    Employees @relation(fields: [employee_id], references: [id])
}

model EmployeeStatus {
  id        Int         @unique @default(autoincrement())
  name      String
  createdAt DateTime    @default(now())
  employees Employees[]
}

model WorkUnitCategory {
  id        Int        @unique @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  work_unit WorkUnit[]
}

model WorkUnit {
  id                    Int                   @unique @default(autoincrement())
  name                  String
  createdAt             DateTime              @default(now())
  work_unit_category_id Int?
  work_unit_category    WorkUnitCategory?     @relation(fields: [work_unit_category_id], references: [id])
  employee_has_workunit EmployeeHasWorkUnit[]
}

model LecturerPosition {
  id                     Int                @unique @default(autoincrement())
  name                   String
  civil_service_level_id Int?
  civil_service          CivilServiceLevel? @relation(fields: [civil_service_level_id], references: [id], onDelete: Cascade)
  createdAt              DateTime           @default(now())
  lecturers              Lecturers[]
}

model AcademicPosition {
  id                     Int                @unique @default(autoincrement())
  name                   String
  civil_service_level_id Int?
  civil_service          CivilServiceLevel? @relation(fields: [civil_service_level_id], references: [id], onDelete: Cascade)
  createdAt              DateTime           @default(now())
  academic_staff         AcademicStaff[]
}

model CivilServiceLevel {
  id                Int                @unique @default(autoincrement())
  name              String
  createdAt         DateTime           @default(now())
  academic_position AcademicPosition[]
  lecturer_position LecturerPosition[]
}

model EmployeeCategories {
  id                   Int                   @unique @default(autoincrement())
  name                 String
  createdAt            DateTime              @default(now())
  employee_has_caegory EmployeeHasCategory[]
}

model AppointmentDecree {
  id          Int       @id @default(autoincrement())
  name        String
  employee_id Int
  employee    Employees @relation(fields: [employee_id], references: [id], onDelete: Cascade)
}
