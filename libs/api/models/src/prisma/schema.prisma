generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Users {
  id            String     @unique @default(uuid())
  email         String     @unique
  fullname      String
  password      String
  refresh_token String?
  role_id       Int?       @default(1)
  createdAt     DateTime   @default(now())
  avatar        String?
  employees     Employees?
  lecturers     Lecturers?
  students      Students?
  otp           OTP?
  isVerified    Boolean?   @default(false)
  role          Roles?     @relation(fields: [role_id], references: [id])
}

model Students {
  id                     String             @unique @default(uuid())
  nik                    String?
  nisn                   String?
  no_kk                  String?
  gender                 Gender?            @relation(fields: [gender_id], references: [id])
  gender_id              Int?
  religion               Religion?          @relation(fields: [religion_id], references: [id])
  religion_id            Int?
  birth_place            String?
  birth_date             String?
  phone_number           String?            @unique
  citizenship            Citizenship?       @relation(fields: [citizenship_id], references: [id])
  citizenship_id         Int?
  marital_status         MaritalStatus?     @relation(fields: [marital_status_id], references: [id])
  marital_status_id      Int?
  country                Country?           @relation(fields: [country_id], references: [id])
  country_id             Int?
  address                String?
  subdistrict            SubDistrict?       @relation("student", fields: [subdistrict_id], references: [id])
  subdistrict_id         Int?
  province               Province?          @relation("student", fields: [province_id], references: [id])
  province_id            Int?
  city                   City?              @relation("student", fields: [city_id], references: [id])
  city_id                Int?
  school_type            SchoolTypes?       @relation("student", fields: [school_type_id], references: [id])
  school_type_id         Int?
  school_major           String?
  graduation_year        String?
  school_npsn            String?
  school                 EducationHistory?  @relation(fields: [school_npsn], references: [npsn])
  father_name            String?
  father_status          ParentStatus?      @relation("father", fields: [father_status_id], references: [id])
  father_status_id       String?
  father_education       SchoolTypes?       @relation("father", fields: [father_education_id], references: [id])
  father_education_id    Int?
  father_occupation      Ocupation?         @relation("father", fields: [father_occupation_id], references: [id])
  father_occupation_id   Int?
  father_position        OcupationPosition? @relation("father", fields: [father_position_id], references: [id])
  father_position_id     Int?
  father_salary          Salary?            @relation("father", fields: [father_salary_id], references: [id])
  father_salary_id       Int?
  mother_name            String?
  mother_status          ParentStatus?      @relation("mother", fields: [mother_status_id], references: [id])
  mother_status_id       String?
  mother_education       SchoolTypes?       @relation("mother", fields: [mother_education_id], references: [id])
  mother_education_id    Int?
  mother_occupation      Ocupation?         @relation("mother", fields: [mother_occupation_id], references: [id])
  mother_occupation_id   Int?
  mother_position        OcupationPosition? @relation("mother", fields: [mother_position_id], references: [id])
  mother_position_id     Int?
  mother_salary          Salary?            @relation("mother", fields: [mother_salary_id], references: [id])
  mother_salary_id       Int?
  guardian_name          String?
  guardian_status        ParentStatus?      @relation("guardian", fields: [guardian_status_id], references: [id])
  guardian_status_id     String?
  guardian_education     SchoolTypes?       @relation("guardian", fields: [guardian_education_id], references: [id])
  guardian_education_id  Int?
  guardian_occupation    Ocupation?         @relation("guardian", fields: [guardian_occupation_id], references: [id])
  guardian_occupation_id Int?
  guardian_position      OcupationPosition? @relation("guardian", fields: [guardian_position_id], references: [id])
  guardian_position_id   Int?
  guardian_salary        Salary?            @relation("guardian", fields: [guardian_salary_id], references: [id])
  guardian_salary_id     Int?
  parent_province        Province?          @relation("parent", fields: [parent_province_id], references: [id])
  parent_province_id     Int?
  parent_subdistrict     SubDistrict?       @relation("parent", fields: [parent_subdistrict_id], references: [id])
  parent_subdistrict_id  Int?
  parent_city            City?              @relation("parent", fields: [parent_city_id], references: [id])
  parent_city_id         Int?
  parent_address         String?

  faculty_type         String?
  education_programs   String?
  study_program        String?
  selection_type       String?
  family_card          String?
  pass_photo           String?
  ktp_card             String?
  school_report_card   String?
  birth_certificate    String?
  additional_documents String?
  ijazah_card          String?
  kipk_card            String?
  academic_year        String?
  registration_wave    String?
  registration_status  String?
  registration_number  String?
  user_id              String   @unique
  createdAt            DateTime @default(now())
  user                 Users    @relation(fields: [user_id], references: [id])
}

model SchoolTypes {
  id           Int           @id @default(autoincrement())
  name         String
  students     Students[]    @relation("student")
  school_major SchoolMajor[]
  father       Students[]    @relation("father")
  mother       Students[]    @relation("mother")
  guardian     Students[]    @relation("guardian")
}

model ParentStatus {
  id       String     @unique @default(uuid())
  name     String
  father   Students[] @relation("father")
  mother   Students[] @relation("mother")
  guardian Students[] @relation("guardian")
}

model Province {
  id       Int        @id @default(autoincrement())
  name     String
  cities   City[]
  students Students[] @relation("student")
  parent   Students[] @relation("parent")
}

model City {
  id           Int           @id @default(autoincrement())
  name         String
  province_id  Int
  province     Province      @relation(fields: [province_id], references: [id], onDelete: Cascade)
  sub_district SubDistrict[]
  students     Students[]    @relation("student")
  parent       Students[]    @relation("parent")
}

model SubDistrict {
  id       Int        @id @default(autoincrement())
  name     String
  city_id  Int
  city     City       @relation(fields: [city_id], references: [id], onDelete: Cascade)
  students Students[] @relation("student")
  parent   Students[] @relation("parent")
}

model Roles {
  id                Int                @id @default(autoincrement())
  name              String
  createdAt         DateTime           @default(now())
  roles_permissions RolesPermissions[]
  users             Users[]
  permissions       Permissions[]      @relation("PermissionsToRoles")
}

model Permissions {
  id                Int                @id @default(1)
  name              String
  createdAt         DateTime           @default(now())
  roles_permissions RolesPermissions[]
  roles             Roles[]            @relation("PermissionsToRoles")
}

model RolesPermissions {
  id            Int         @id @default(autoincrement())
  role_id       Int
  permission_id Int
  createdAt     DateTime    @default(now())
  permission    Permissions @relation(fields: [permission_id], references: [id])
  role          Roles       @relation(fields: [role_id], references: [id])
}

model OTP {
  id        Int    @id @default(autoincrement())
  token     String
  user_id   String @unique
  user      Users  @relation(fields: [user_id], references: [id])
  expiredAt Int
}

model DegreeProgram {
  id         Int          @id @default(autoincrement())
  name       String
  faculty    Faculty[]
  department Department[]
}

model Faculty {
  id               Int            @id @default(autoincrement())
  name             String
  department       Department[]
  degreeProgram_id Int?
  degreeProgram    DegreeProgram? @relation(fields: [degreeProgram_id], references: [id])
}

model Department {
  id                Int            @id @default(autoincrement())
  name              String
  faculty_id        Int?
  degree_program_id Int?
  Faculty           Faculty?       @relation(fields: [faculty_id], references: [id])
  degreeProgram     DegreeProgram? @relation(fields: [degree_program_id], references: [id])
}

model MaritalStatus {
  id       Int        @id @default(autoincrement())
  name     String
  students Students[]
}

model Religion {
  id       Int        @id @default(autoincrement())
  name     String
  students Students[]
}

model Gender {
  id       Int        @id @default(autoincrement())
  name     String
  students Students[]
}

model Citizenship {
  id       Int        @id @default(autoincrement())
  name     String
  Country  Country[]
  students Students[]
}

model Salary {
  id       Int        @id @default(autoincrement())
  name     String
  father   Students[] @relation("father")
  mother   Students[] @relation("mother")
  guardian Students[] @relation("guardian")
}

model SelectionPath {
  id   Int    @id @default(autoincrement())
  name String
}

model EducationHistory {
  id             Int        @id @default(autoincrement())
  npsn           String     @unique
  name           String
  province       String
  district_city  String
  sub_district   String
  street_address String
  students       Students[]
}

model Country {
  id             Int          @id @default(autoincrement())
  name           String
  citizenship_id Int?
  citizenship    Citizenship? @relation(fields: [citizenship_id], references: [id])
  students       Students[]
}

model Ocupation {
  id                 Int                 @id @default(autoincrement())
  name               String
  occupationposition OcupationPosition[]
  father             Students[]          @relation("father")
  mother             Students[]          @relation("mother")
  guardian           Students[]          @relation("guardian")
}

model OcupationPosition {
  id           Int        @id @default(autoincrement())
  name         String
  ocupation_id Int?
  ocupation    Ocupation? @relation(fields: [ocupation_id], references: [id])
  father       Students[] @relation("father")
  mother       Students[] @relation("mother")
  guardian     Students[] @relation("guardian")
}

model Disabilities {
  id   Int    @id @default(autoincrement())
  name String
}

model Scholarship {
  id   Int    @id @default(autoincrement())
  name String
}

model SchoolMajor {
  id             Int         @id @default(autoincrement())
  name           String
  school_type_id Int
  school_type    SchoolTypes @relation(fields: [school_type_id], references: [id])
}

model Questions {
  id                Int      @id @default(autoincrement())
  question          String
  correct_answer    String
  incorrect_answers String[]
}

model Lecturers {
  id        String   @unique @default(uuid())
  nip       String   @unique
  createdAt DateTime @default(now())
  user_id   String   @unique
  user      Users    @relation(fields: [user_id], references: [id])
}

model Employees {
  id        String   @unique @default(uuid())
  nim       String   @unique
  createdAt DateTime @default(now())
  user_id   String   @unique
  user      Users    @relation(fields: [user_id], references: [id])
}
