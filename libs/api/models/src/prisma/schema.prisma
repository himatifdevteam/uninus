generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Users {
  id            String     @unique @default(uuid())
  email         String     @unique
  fullname      String
  password      String
  refresh_token String?
  role_id       Int?       @default(1)
  createdAt     DateTime   @default(now())
  avatar        String?
  isVerified    Boolean?   @default(false)
  employees     Employees?
  otp           OTP?
  students      Students?
  role          Roles?     @relation(fields: [role_id], references: [id])
}

model Students {
  id                      String           @unique @default(uuid())
  nik                     String?
  nisn                    String?
  no_kk                   String?
  gender_id               Int?
  religion_id             Int?
  birth_place             String?
  birth_date              String?
  phone_number            String?          @unique
  citizenship_id          Int?
  marital_status_id       Int?
  country_id              Int?
  address                 String?
  subdistrict_id          Int?
  province_id             Int?
  city_id                 Int?
  education_type_id       Int?
  education_major_id      Int?
  graduation_year         String?
  education_npsn          String?
  salary_id               Int?
  occupation_id           Int?
  company_name            String?
  company_address         String?
  father_name             String?
  father_status_id        Int?
  father_education_id     Int?
  father_occupation_id    Int?
  father_salary_id        Int?
  mother_name             String?
  mother_status_id        Int?
  mother_education_id     Int?
  mother_occupation_id    Int?
  mother_salary_id        Int?
  guardian_name           String?
  guardian_status_id      Int?
  guardian_education_id   Int?
  guardian_occupation_id  Int?
  guardian_salary_id      Int?
  guardian_province_id    Int?
  guardian_subdistrict_id Int?
  guardian_city_id        Int?
  guardian_address        String?
  parent_province_id      Int?
  parent_subdistrict_id   Int?
  parent_city_id          Int?
  parent_address          String?
  scholarship_id          Int?
  disabilities_id         Int?
  faculty_id              Int?
  department_id           Int?
  academic_year           String?
  user_id                 String           @unique
  createdAt               DateTime         @default(now())
  father_position         String?
  guardian_position       String?
  mother_position         String?
  occupation_position     String?
  guardian_lecturer_id    String?
  guardian_lecturer       Lecturers?       @relation(fields: [guardian_lecturer_id], references: [id])
  pmb                     PMB?
  citizenship             Citizenship?     @relation(fields: [citizenship_id], references: [id])
  city                    City?            @relation("student", fields: [city_id], references: [id])
  country                 Country?         @relation(fields: [country_id], references: [id])
  department              Department?      @relation("student", fields: [department_id], references: [id])
  disabilities            Disabilities?    @relation(fields: [disabilities_id], references: [id])
  education_major         EducationMajor?  @relation(fields: [education_major_id], references: [id])
  education               Education?       @relation(fields: [education_npsn], references: [npsn])
  education_type          EducationTypes?  @relation(fields: [education_type_id], references: [id])
  faculty                 Faculty?         @relation(fields: [faculty_id], references: [id])
  father_education        ParentEducation? @relation("father", fields: [father_education_id], references: [id])
  father_occupation       Occupation?      @relation("father", fields: [father_occupation_id], references: [id])
  father_salary           Salary?          @relation("father", fields: [father_salary_id], references: [id])
  father_status           ParentStatus?    @relation("father", fields: [father_status_id], references: [id])
  gender                  Gender?          @relation(fields: [gender_id], references: [id])
  guardian_city           City?            @relation("guardian", fields: [guardian_city_id], references: [id])
  guardian_education      ParentEducation? @relation("guardian", fields: [guardian_education_id], references: [id])
  guardian_occupation     Occupation?      @relation("guardian", fields: [guardian_occupation_id], references: [id])
  guardian_province       Province?        @relation("guardian", fields: [guardian_province_id], references: [id])
  guardian_salary         Salary?          @relation("guardian", fields: [guardian_salary_id], references: [id])
  guardian_status         ParentStatus?    @relation("guardian", fields: [guardian_status_id], references: [id])
  guardian_subdistrict    SubDistrict?     @relation("guardian", fields: [guardian_subdistrict_id], references: [id])
  marital_status          MaritalStatus?   @relation(fields: [marital_status_id], references: [id])
  mother_education        ParentEducation? @relation("mother", fields: [mother_education_id], references: [id])
  mother_occupation       Occupation?      @relation("mother", fields: [mother_occupation_id], references: [id])
  mother_salary           Salary?          @relation("mother", fields: [mother_salary_id], references: [id])
  mother_status           ParentStatus?    @relation("mother", fields: [mother_status_id], references: [id])
  occupation              Occupation?      @relation("student", fields: [occupation_id], references: [id])
  parent_city             City?            @relation("parent", fields: [parent_city_id], references: [id])
  parent_province         Province?        @relation("parent", fields: [parent_province_id], references: [id])
  parent_subdistrict      SubDistrict?     @relation("parent", fields: [parent_subdistrict_id], references: [id])
  province                Province?        @relation("student", fields: [province_id], references: [id])
  religion                Religion?        @relation(fields: [religion_id], references: [id])
  salary                  Salary?          @relation("student", fields: [salary_id], references: [id])
  scholarship             Scholarship?     @relation(fields: [scholarship_id], references: [id])
  subdistrict             SubDistrict?     @relation("student", fields: [subdistrict_id], references: [id])
  user                    Users            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  test_score              Int?
  payment_history         PaymentHistory[]
}

model PaymentHistory {
  id                    String              @unique @default(uuid())
  order_id              String              @unique
  payment_method        String?
  payment_code          String?
  payment_obligation_id Int?
  payment_obligation    PaymentObligations? @relation(fields: [payment_obligation_id], references: [id])
  createdAt             DateTime            @default(now())
  student               Students?           @relation(fields: [student_id], references: [id])
  student_id            String?
  payment_type_id       Int?
  payment_type          PaymentType?        @relation(fields: [payment_type_id], references: [id])
}

model PaymentType {
  id             Int              @id @default(autoincrement())
  name           String
  createdAt      DateTime         @default(now())
  PaymentHistory PaymentHistory[]
}

model PaymentObligations {
  id             Int              @unique @default(autoincrement())
  name           String
  amount         Int
  PaymentHistory PaymentHistory[]
}

model StudentGrade {
  id       String  @unique @default(uuid())
  subject  String?
  semester String?
  grade    Float?  @default(0)
  pmb_id   String?
  pmb      PMB?    @relation(fields: [pmb_id], references: [id], onDelete: Cascade)
}

model PMB {
  id                     String              @unique @default(uuid())
  degree_program_id      Int?
  registration_status_id Int?
  registration_number    String?
  selection_path_id      Int?
  student_id             String?             @unique
  utbk_pu                Float?              @default(0)
  utbk_kk                Float?              @default(0)
  utbk_ppu               Float?              @default(0)
  utbk_kmbm              Float?              @default(0)
  average_utbk           Float?              @default(0)
  utbk                   Float?              @default(0)
  average_grade          Float?              @default(0)
  createdAt              DateTime            @default(now())
  registration_path_id   Int?
  first_department_id    Int?
  second_department_id   Int?
  documents              Documents[]
  degree_program         DegreeProgram?      @relation(fields: [degree_program_id], references: [id])
  first_department       Department?         @relation("first_deparment", fields: [first_department_id], references: [id])
  registration_path      RegistrationPath?   @relation(fields: [registration_path_id], references: [id])
  registration_status    RegistrationStatus? @relation(fields: [registration_status_id], references: [id])
  second_department      Department?         @relation("second_deparment", fields: [second_department_id], references: [id])
  selection_path         SelectionPath?      @relation(fields: [selection_path_id], references: [id])
  student                Students?           @relation(fields: [student_id], references: [id], onDelete: Cascade)
  student_grade          StudentGrade[]
}

model RegistrationStatus {
  id   Int     @id @default(autoincrement())
  name String?
  pmb  PMB[]
}

model Documents {
  id         String         @unique @default(uuid())
  name       String
  path       String
  pmb_id     String?
  isVerified Boolean?
  alumni_id  String?
  alumni     AlumniProfile? @relation(fields: [alumni_id], references: [id])
  pmb        PMB?           @relation(fields: [pmb_id], references: [id], onDelete: Cascade)
}

model EducationTypes {
  id                Int              @id @default(autoincrement())
  name              String
  degree_program_id Int?
  education         Education[]
  education_major   EducationMajor[]
  degree_program    DegreeProgram?   @relation(fields: [degree_program_id], references: [id])
  students          Students[]
}

model EducationMajor {
  id                Int            @id @default(autoincrement())
  name              String
  education_type_id Int
  education_type    EducationTypes @relation(fields: [education_type_id], references: [id])
  student           Students[]
}

model ParentEducation {
  id       Int        @id @default(autoincrement())
  name     String
  father   Students[] @relation("father")
  guardian Students[] @relation("guardian")
  mother   Students[] @relation("mother")
}

model ParentStatus {
  id       Int        @id @default(autoincrement())
  name     String
  father   Students[] @relation("father")
  guardian Students[] @relation("guardian")
  mother   Students[] @relation("mother")
}

model Province {
  id        Int         @id @default(autoincrement())
  name      String
  cities    City[]
  Employees Employees[]
  guardian  Students[]  @relation("guardian")
  parent    Students[]  @relation("parent")
  students  Students[]  @relation("student")
}

model City {
  id           Int           @id @default(autoincrement())
  name         String
  province_id  Int
  province     Province      @relation(fields: [province_id], references: [id], onDelete: Cascade)
  Employees    Employees[]
  students     Students[]    @relation("student")
  guardian     Students[]    @relation("guardian")
  parent       Students[]    @relation("parent")
  sub_district SubDistrict[]
}

model SubDistrict {
  id        Int         @id @default(autoincrement())
  name      String
  city_id   Int
  Employees Employees[]
  guardian  Students[]  @relation("guardian")
  parent    Students[]  @relation("parent")
  students  Students[]  @relation("student")
  city      City        @relation(fields: [city_id], references: [id], onDelete: Cascade)
}

model Roles {
  id         Int          @id @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  users      Users[]
  appsOrigin AppsOrigin[] @relation("RolesAppOrigin")
}

model AppsOrigin {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  roles     Roles[]  @relation("RolesAppOrigin")
}

model OTP {
  id        Int    @id @default(autoincrement())
  token     String
  user_id   String @unique
  expiredAt BigInt
  user      Users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model DegreeProgram {
  id             Int              @id @default(autoincrement())
  name           String
  department     Department[]
  education_type EducationTypes[]
  faculty        Faculty[]
  pmb            PMB[]
  selection_path SelectionPath[]
}

model SelectionPath {
  id                Int            @id @default(autoincrement())
  name              String
  degree_program_id Int?
  PMB               PMB[]
  degree_program    DegreeProgram? @relation(fields: [degree_program_id], references: [id])
}

model RegistrationPath {
  id   Int    @id @default(autoincrement())
  name String
  PMB  PMB[]
}

model Faculty {
  id                        Int                         @id @default(autoincrement())
  name                      String
  degree_program_id         Int?
  alumni                    AlumniProfile[]
  department                Department[]
  degreeProgram             DegreeProgram?              @relation(fields: [degree_program_id], references: [id], onDelete: Cascade)
  LecturerFacultyDepartment LecturerFacultyDepartment[]
  student                   Students[]
}

model Department {
  id                        Int                         @id @default(autoincrement())
  name                      String
  faculty_id                Int?
  degree_program_id         Int?
  alumni                    AlumniProfile[]
  degreeProgram             DegreeProgram?              @relation(fields: [degree_program_id], references: [id])
  Faculty                   Faculty?                    @relation(fields: [faculty_id], references: [id])
  LecturerFacultyDepartment LecturerFacultyDepartment[]
  first_deparment           PMB[]                       @relation("first_deparment")
  second_deparment          PMB[]                       @relation("second_deparment")
  student                   Students[]                  @relation("student")
}

model MaritalStatus {
  id       Int             @id @default(autoincrement())
  name     String
  alumni   AlumniProfile[]
  students Students[]
}

model Religion {
  id        Int             @id @default(autoincrement())
  name      String
  alumni    AlumniProfile[]
  Employees Employees[]
  students  Students[]
}

model Gender {
  id        Int             @id @default(autoincrement())
  name      String
  alumni    AlumniProfile[]
  Employees Employees[]
  students  Students[]
}

model Citizenship {
  id        Int         @id @default(autoincrement())
  name      String
  Country   Country[]
  Employees Employees[]
  students  Students[]
}

model Salary {
  id       Int        @id @default(autoincrement())
  name     String
  father   Students[] @relation("father")
  guardian Students[] @relation("guardian")
  mother   Students[] @relation("mother")
  Students Students[] @relation("student")
}

model Education {
  id                     Int                    @id @default(autoincrement())
  npsn                   String                 @unique
  name                   String
  province               String
  district_city          String
  sub_district           String
  street_address         String
  education_type_id      Int?
  education_type         EducationTypes?        @relation(fields: [education_type_id], references: [id])
  employee_has_education EmployeeHasEducation[]
  students               Students[]
}

model Country {
  id             Int          @id @default(autoincrement())
  name           String
  citizenship_id Int?
  citizenship    Citizenship? @relation(fields: [citizenship_id], references: [id])
  Employees      Employees[]
  students       Students[]
}

model Occupation {
  id       Int        @id @default(autoincrement())
  name     String
  father   Students[] @relation("father")
  guardian Students[] @relation("guardian")
  mother   Students[] @relation("mother")
  Students Students[] @relation("student")
}

model OccupationPosition {
  id   Int    @id @default(autoincrement())
  name String
}

model Disabilities {
  id      Int        @id @default(autoincrement())
  name    String
  student Students[]
}

model Scholarship {
  id       Int        @id @default(autoincrement())
  name     String
  discount Int?
  student  Students[]
}

model Questions {
  id             Int      @id @default(autoincrement())
  question       String
  correct_answer String
  answers        String[]
}

model Employees {
  user_id                  String                    @unique
  createdAt                DateTime                  @default(now())
  addition_task            String?
  birth_date               String?
  employee_status_id       Int?
  nidn                     String?
  nip                      String?
  id                       Int                       @unique @default(autoincrement())
  employee_type_id         Int?
  nik                      String?
  gender_id                Int?
  address                  String?
  birth_place              String?
  citizenship_id           Int?
  city_id                  Int?
  country_id               Int?
  province_id              Int?
  religion_id              Int?
  sub_district_id          Int?
  academic_staff           AcademicStaff?
  certification_profession CertificationProfession[]
  employee_document        EmployeeDocuments[]
  employee_has_category    EmployeeHasCategory[]
  employee_has_education   EmployeeHasEducation[]
  employee_has_workunit    EmployeeHasWorkUnit[]
  Citizenship              Citizenship?              @relation(fields: [citizenship_id], references: [id])
  City                     City?                     @relation(fields: [city_id], references: [id])
  Country                  Country?                  @relation(fields: [country_id], references: [id])
  employee_status          EmployeeStatus?           @relation(fields: [employee_status_id], references: [id])
  Employee_type            EmployeeType?             @relation(fields: [employee_type_id], references: [id])
  gender                   Gender?                   @relation(fields: [gender_id], references: [id])
  Province                 Province?                 @relation(fields: [province_id], references: [id])
  Religion                 Religion?                 @relation(fields: [religion_id], references: [id])
  SubDistrict              SubDistrict?              @relation(fields: [sub_district_id], references: [id])
  user                     Users                     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  lecturers                Lecturers?
}

model EmployeeHasEducation {
  id           Int        @id @default(autoincrement())
  employee_id  Int
  education_id Int?
  education    Education? @relation(fields: [education_id], references: [id])
  employee     Employees  @relation(fields: [employee_id], references: [id])
}

model EmployeeHasCategory {
  id                   Int                @id @default(autoincrement())
  employee_id          Int
  employee_category_id Int
  employee_category    EmployeeCategories @relation(fields: [employee_category_id], references: [id])
  employee             Employees          @relation(fields: [employee_id], references: [id])
}

model EmployeeHasWorkUnit {
  id           Int       @id @default(autoincrement())
  employee_id  Int
  work_unit_id Int
  employee     Employees @relation(fields: [employee_id], references: [id])
  work_unit    WorkUnit  @relation(fields: [work_unit_id], references: [id])
}

model Lecturers {
  id                          String                      @unique @default(uuid())
  user_id                     String                      @unique
  createdAt                   DateTime                    @default(now())
  employee_id                 Int?                        @unique
  lecturer_certification      Boolean?
  lecturer_position_id        Int?
  lecturer_status_id          Int?
  lecturer_faculty_department LecturerFacultyDepartment[]
  employee                    Employees?                  @relation(fields: [employee_id], references: [id])
  lecturer_position           LecturerPosition?           @relation(fields: [lecturer_position_id], references: [id])
  lecturer_status             LecturerStatus?             @relation(fields: [lecturer_status_id], references: [id])
  students                    Students[]
}

model AcademicStaff {
  id                   String            @unique @default(uuid())
  employee_id          Int?              @unique
  academic_position_id Int?
  createdAt            DateTime          @default(now())
  academic_status_id   Int?
  academin_position    AcademicPosition? @relation(fields: [academic_position_id], references: [id])
  academic_status      AcademicStatus?   @relation(fields: [academic_status_id], references: [id])
  employee             Employees?        @relation(fields: [employee_id], references: [id])
}

model CertificationProfession {
  id          Int       @id @default(autoincrement())
  name        String
  path        String
  employee_id Int
  employee    Employees @relation(fields: [employee_id], references: [id])
}

model EmployeeStatus {
  id        Int         @unique @default(autoincrement())
  name      String
  createdAt DateTime    @default(now())
  employees Employees[]
}

model WorkUnitCategory {
  id        Int        @unique @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  work_unit WorkUnit[]
}

model WorkUnit {
  id                    Int                   @unique @default(autoincrement())
  name                  String
  createdAt             DateTime              @default(now())
  work_unit_category_id Int?
  employee_has_workunit EmployeeHasWorkUnit[]
  work_unit_category    WorkUnitCategory?     @relation(fields: [work_unit_category_id], references: [id])
}

model LecturerPosition {
  id                     Int                @unique @default(autoincrement())
  name                   String
  civil_service_level_id Int?
  createdAt              DateTime           @default(now())
  civil_service          CivilServiceLevel? @relation(fields: [civil_service_level_id], references: [id], onDelete: Cascade)
  lecturers              Lecturers[]
}

model AcademicPosition {
  id                     Int                @unique @default(autoincrement())
  name                   String
  civil_service_level_id Int?
  createdAt              DateTime           @default(now())
  civil_service          CivilServiceLevel? @relation(fields: [civil_service_level_id], references: [id], onDelete: Cascade)
  academic_staff         AcademicStaff[]
}

model CivilServiceLevel {
  id                Int                @unique @default(autoincrement())
  name              String
  createdAt         DateTime           @default(now())
  academic_position AcademicPosition[]
  lecturer_position LecturerPosition[]
}

model EmployeeCategories {
  id                   Int                   @unique @default(autoincrement())
  name                 String
  createdAt            DateTime              @default(now())
  employee_has_caegory EmployeeHasCategory[]
}

model EmployeeDocuments {
  id          Int       @id @default(autoincrement())
  name        String
  employee_id Int
  employee    Employees @relation(fields: [employee_id], references: [id], onDelete: Cascade)
}

model AcademicStatus {
  id            Int             @id @default(autoincrement())
  name          String
  createdAt     DateTime
  AcademicStaff AcademicStaff[]
}

model EmployeeType {
  id        Int         @id @default(autoincrement())
  name      String
  createdAt DateTime
  Employees Employees[]
}

model LecturerStatus {
  id        Int         @id @default(autoincrement())
  name      String
  createdAt DateTime
  Lecturers Lecturers[]
}

model AlumniProfile {
  id                String         @unique @default(uuid())
  email             String?        @unique
  name              String?
  birth_place       String?
  birth_date        String?
  nim               String?
  faculty_id        Int?
  department_id     Int?
  marital_status_id Int?
  religion_id       Int?
  gender_id         Int?
  phone_number      String?
  entry_year        String?
  graduation_year   String?
  working_status_id Int?
  work_place        String?
  working_address   String?
  department        Department?    @relation(fields: [department_id], references: [id])
  faculty           Faculty?       @relation(fields: [faculty_id], references: [id])
  gender            Gender?        @relation(fields: [gender_id], references: [id])
  marital_status    MaritalStatus? @relation(fields: [marital_status_id], references: [id])
  religion          Religion?      @relation(fields: [religion_id], references: [id])
  working_status    WorkingStatus? @relation(fields: [working_status_id], references: [id])
  documents         Documents[]
}

model WorkingStatus {
  id     Int             @id @default(autoincrement())
  nmae   String
  alumni AlumniProfile[]
}

model LecturerFacultyDepartment {
  id            Int        @id @default(autoincrement())
  lecturer_id   String
  faculty_id    Int?
  department_id Int
  department    Department @relation(fields: [department_id], references: [id])
  faculty       Faculty?   @relation(fields: [faculty_id], references: [id])
  lecturer      Lecturers  @relation(fields: [lecturer_id], references: [id])
}
